version: 2.1

variables:
  working_directory: &working_directory '~/aws-mocks'
  docker_version: &docker_version '18.09.3'

executors:
  jdk:
    working_directory: *working_directory
    docker:
      - image: 'circleci/openjdk:8-jdk'
    environment:
      JVM_OPTS: '-Xmx3200m'
      TERM: 'dumb'
  docker:
    working_directory: *working_directory
    docker:
      - image: 'circleci/python'
  jdk-machine:
    working_directory: *working_directory
    machine: true

orbs:
  docker: circleci/docker@0.5.1

commands:
  attach_at_working_directory:
    steps:
      - attach_workspace:
          at: *working_directory

  store_jvm_test_results:
    steps:
      - run:
          name: 'Save test results'
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: '~/junit'

  restore_gradle_cache:
    steps:
      - restore_cache:
          name: 'Restore Gradle cache'
          keys:
            - &gradle_cache 'v1-gradle-{{ checksum ".gradleChecksum" }}'
            - 'v1-gradle-'
  save_gradle_cache:
    steps:
      - save_cache:
          name: 'Save Gradle dependencies'
          key: *gradle_cache
          paths: '~/.gradle'

jobs:
  prepare_workspace:
    executor: 'jdk'
    steps:
      - checkout
      - run:
          name: 'Save initial build number'
          command: 'echo ${CIRCLE_BUILD_NUM} > .build-number'
      - run:
          name: 'Generate dependency checksum'
          command: 'shasum build.gradle.kts > .gradleChecksum'
      - persist_to_workspace:
          root: '.'
          paths: '.'

  compile:
    executor: 'jdk'
    steps:
      - attach_at_working_directory
      - restore_gradle_cache
      - run:
          name: 'Compile source and test code'
          command: './gradlew --build-cache ci-classes'
      - save_gradle_cache
      - persist_to_workspace:
          root: '.'
          paths:
            - '.gradle/'
            - '.gradle-cache/'
            - 'build/'

  checks:
    executor: 'jdk'
    steps:
      - attach_at_working_directory
      - restore_gradle_cache
      - run:
          name: 'Run static checks'
          command: './gradlew --build-cache ci-check'
      - store_jvm_test_results

  unit_tests:
    executor: 'jdk'
    steps:
      - attach_at_working_directory
      - restore_gradle_cache
      - run:
          name: 'Run unit tests'
          command: './gradlew --build-cache ci-unit-tests'
      - store_jvm_test_results

  e2e:
    executor: 'jdk-machine'
    steps:
      - attach_at_working_directory
      - restore_gradle_cache
      - run:
          name: 'Run E2E tests'
          command: './gradlew --build-cache ci-e2e'
      - store_jvm_test_results

  docker_build_and_push:
    executor: 'docker'
    parameters:
      docker_tag:
        type: string
        default: ""
    steps:
      - attach_at_working_directory
      - setup_remote_docker:
          version: *docker_version
      - when:
          condition: <<parameters.docker_tag>>
          steps:
            - run: echo "export APP_VERSION=<<parameters.docker_tag>>" >> $BASH_ENV
      - unless:
          condition: <<parameters.docker_tag>>
          steps:
            - run: echo "export APP_VERSION=$(cut -d 'v' -f 2 \<<<$CIRCLE_TAG)" >> $BASH_ENV
      - run: 'echo "App version: $APP_VERSION"'
      - docker/check
      - docker/build:
          image: kronostechnologies/aws-mocks
          tag: ${APP_VERSION}
      - docker/push:
          image: kronostechnologies/aws-mocks
          tag: ${APP_VERSION}

workflows:
  version: 2

  code_check:
    jobs:
      - prepare_workspace
      - compile:
          requires:
            - prepare_workspace

      - checks:
          requires:
            - compile
      - unit_tests:
          requires:
            - compile
      - e2e:
          requires:
            - compile

      - docker_build_and_push:
          context: orb/docker
          docker_tag: latest
          filters:
            branches:
              only: master
          requires:
            - checks
            - unit_tests
            - e2e
